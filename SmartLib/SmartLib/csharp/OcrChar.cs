//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.smartid {

public class OcrChar : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OcrChar(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OcrChar obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OcrChar() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csSmartIdEnginePINVOKE.delete_OcrChar(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public OcrChar() : this(csSmartIdEnginePINVOKE.new_OcrChar__SWIG_0(), true) {
  }

  public OcrChar(OcrCharVariantVector ocr_char_variants, bool is_highlighted, bool is_corrected) : this(csSmartIdEnginePINVOKE.new_OcrChar__SWIG_1(OcrCharVariantVector.getCPtr(ocr_char_variants), is_highlighted, is_corrected), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public OcrCharVariantVector GetOcrCharVariants() {
    OcrCharVariantVector ret = new OcrCharVariantVector(csSmartIdEnginePINVOKE.OcrChar_GetOcrCharVariants(swigCPtr), false);
    return ret;
  }

  public bool IsHighlighted() {
    bool ret = csSmartIdEnginePINVOKE.OcrChar_IsHighlighted(swigCPtr);
    return ret;
  }

  public bool IsCorrected() {
    bool ret = csSmartIdEnginePINVOKE.OcrChar_IsCorrected(swigCPtr);
    return ret;
  }

  public ushort GetUtf16Character() {
    ushort ret = csSmartIdEnginePINVOKE.OcrChar_GetUtf16Character(swigCPtr);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetUtf8Character() {
    string ret = csSmartIdEnginePINVOKE.OcrChar_GetUtf8Character(swigCPtr);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
