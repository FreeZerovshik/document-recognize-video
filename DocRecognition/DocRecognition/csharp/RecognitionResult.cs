//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.smartid {

public class RecognitionResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RecognitionResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RecognitionResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RecognitionResult() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csSmartIdEnginePINVOKE.delete_RecognitionResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public RecognitionResult() : this(csSmartIdEnginePINVOKE.new_RecognitionResult__SWIG_0(), true) {
  }

  public RecognitionResult(StringFieldCollection string_fields, ImageFieldCollection image_fields, string document_type, MatchResultVector match_results, SegmentationResultVector segmentation_results, bool is_terminal) : this(csSmartIdEnginePINVOKE.new_RecognitionResult__SWIG_1(StringFieldCollection.getCPtr(string_fields), ImageFieldCollection.getCPtr(image_fields), document_type, MatchResultVector.getCPtr(match_results), SegmentationResultVector.getCPtr(segmentation_results), is_terminal), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetStringFieldNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.RecognitionResult_GetStringFieldNames(swigCPtr), true);
    return ret;
  }

  public bool HasStringField(string name) {
    bool ret = csSmartIdEnginePINVOKE.RecognitionResult_HasStringField(swigCPtr, name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringField GetStringField(string name) {
    StringField ret = new StringField(csSmartIdEnginePINVOKE.RecognitionResult_GetStringField(swigCPtr, name), false);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringFieldCollection GetStringFields() {
    StringFieldCollection ret = new StringFieldCollection(csSmartIdEnginePINVOKE.RecognitionResult_GetStringFields__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void SetStringFields(StringFieldCollection string_fields) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetStringFields(swigCPtr, StringFieldCollection.getCPtr(string_fields));
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetImageFieldNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.RecognitionResult_GetImageFieldNames(swigCPtr), true);
    return ret;
  }

  public bool HasImageField(string name) {
    bool ret = csSmartIdEnginePINVOKE.RecognitionResult_HasImageField(swigCPtr, name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ImageField GetImageField(string name) {
    ImageField ret = new ImageField(csSmartIdEnginePINVOKE.RecognitionResult_GetImageField(swigCPtr, name), false);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ImageFieldCollection GetImageFields() {
    ImageFieldCollection ret = new ImageFieldCollection(csSmartIdEnginePINVOKE.RecognitionResult_GetImageFields__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void SetImageFields(ImageFieldCollection image_fields) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetImageFields(swigCPtr, ImageFieldCollection.getCPtr(image_fields));
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetDocumentType() {
    string ret = csSmartIdEnginePINVOKE.RecognitionResult_GetDocumentType(swigCPtr);
    return ret;
  }

  public void SetDocumentType(string doctype) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetDocumentType(swigCPtr, doctype);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MatchResultVector GetMatchResults() {
    MatchResultVector ret = new MatchResultVector(csSmartIdEnginePINVOKE.RecognitionResult_GetMatchResults(swigCPtr), false);
    return ret;
  }

  public void SetMatchResults(MatchResultVector match_results) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetMatchResults(swigCPtr, MatchResultVector.getCPtr(match_results));
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SegmentationResultVector GetSegmentationResults() {
    SegmentationResultVector ret = new SegmentationResultVector(csSmartIdEnginePINVOKE.RecognitionResult_GetSegmentationResults(swigCPtr), false);
    return ret;
  }

  public void SetSegmentationResults(SegmentationResultVector segmentation_results) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetSegmentationResults(swigCPtr, SegmentationResultVector.getCPtr(segmentation_results));
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsTerminal() {
    bool ret = csSmartIdEnginePINVOKE.RecognitionResult_IsTerminal(swigCPtr);
    return ret;
  }

  public void SetIsTerminal(bool is_terminal) {
    csSmartIdEnginePINVOKE.RecognitionResult_SetIsTerminal(swigCPtr, is_terminal);
  }

}

}
