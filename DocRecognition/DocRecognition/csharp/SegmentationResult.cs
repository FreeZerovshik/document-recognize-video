//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.smartid {

public class SegmentationResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SegmentationResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SegmentationResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SegmentationResult() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csSmartIdEnginePINVOKE.delete_SegmentationResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SegmentationResult() : this(csSmartIdEnginePINVOKE.new_SegmentationResult__SWIG_0(), true) {
  }

  public SegmentationResult(QuadrangleCollection zone_quadrangles, bool accepted) : this(csSmartIdEnginePINVOKE.new_SegmentationResult__SWIG_1(QuadrangleCollection.getCPtr(zone_quadrangles), accepted), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SegmentationResult(QuadrangleCollection zone_quadrangles) : this(csSmartIdEnginePINVOKE.new_SegmentationResult__SWIG_2(QuadrangleCollection.getCPtr(zone_quadrangles)), true) {
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetZoneNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.SegmentationResult_GetZoneNames(swigCPtr), true);
    return ret;
  }

  public bool HasZoneQuadrangle(string zone_name) {
    bool ret = csSmartIdEnginePINVOKE.SegmentationResult_HasZoneQuadrangle(swigCPtr, zone_name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quadrangle GetZoneQuadrangle(string zone_name) {
    Quadrangle ret = new Quadrangle(csSmartIdEnginePINVOKE.SegmentationResult_GetZoneQuadrangle(swigCPtr, zone_name), false);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public QuadrangleCollection GetZoneQuadrangles() {
    QuadrangleCollection ret = new QuadrangleCollection(csSmartIdEnginePINVOKE.SegmentationResult_GetZoneQuadrangles(swigCPtr), false);
    return ret;
  }

  public string GetZoneFieldName(string zone_name) {
    string ret = csSmartIdEnginePINVOKE.SegmentationResult_GetZoneFieldName(swigCPtr, zone_name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetAccepted() {
    bool ret = csSmartIdEnginePINVOKE.SegmentationResult_GetAccepted(swigCPtr);
    return ret;
  }

}

}
