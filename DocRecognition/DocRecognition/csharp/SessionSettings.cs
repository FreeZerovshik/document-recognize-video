//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.smartid {

public class SessionSettings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SessionSettings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SessionSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SessionSettings() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csSmartIdEnginePINVOKE.delete_SessionSettings(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual SessionSettings Clone() {
    global::System.IntPtr cPtr = csSmartIdEnginePINVOKE.SessionSettings_Clone(swigCPtr);
    SessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new SessionSettings(cPtr, true);
    return ret;
  }

  public StringVector GetEnabledDocumentTypes() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.SessionSettings_GetEnabledDocumentTypes(swigCPtr), false);
    return ret;
  }

  public void AddEnabledDocumentTypes(string doctype_mask) {
    csSmartIdEnginePINVOKE.SessionSettings_AddEnabledDocumentTypes(swigCPtr, doctype_mask);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveEnabledDocumentTypes(string doctype_mask) {
    csSmartIdEnginePINVOKE.SessionSettings_RemoveEnabledDocumentTypes(swigCPtr, doctype_mask);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetEnabledDocumentTypes(StringVector document_types) {
    csSmartIdEnginePINVOKE.SessionSettings_SetEnabledDocumentTypes(swigCPtr, StringVector.getCPtr(document_types));
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector2d GetSupportedDocumentTypes() {
    StringVector2d ret = new StringVector2d(csSmartIdEnginePINVOKE.SessionSettings_GetSupportedDocumentTypes(swigCPtr), false);
    return ret;
  }

  public StringVector GetOptionNames() {
    StringVector ret = new StringVector(csSmartIdEnginePINVOKE.SessionSettings_GetOptionNames(swigCPtr), true);
    return ret;
  }

  public bool HasOption(string name) {
    bool ret = csSmartIdEnginePINVOKE.SessionSettings_HasOption(swigCPtr, name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetOption(string name) {
    string ret = csSmartIdEnginePINVOKE.SessionSettings_GetOption(swigCPtr, name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetOption(string name, string value) {
    csSmartIdEnginePINVOKE.SessionSettings_SetOption(swigCPtr, name, value);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveOption(string name) {
    csSmartIdEnginePINVOKE.SessionSettings_RemoveOption(swigCPtr, name);
    if (csSmartIdEnginePINVOKE.SWIGPendingException.Pending) throw csSmartIdEnginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
